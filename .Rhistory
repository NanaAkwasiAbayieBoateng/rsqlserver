source('~/.active-rstudio-document', echo=TRUE)
dat
head(1:10,-1)
c(NA,head(1:10,-1))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dt
library(sos)
findFn('which.na')
is.na(1:4)
which(is.na(1:4))
dat[which(is.na(1:4))]
tt <- dbListTables(conn2)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
library(knitr)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
tm <- microbenchmark(conn1<- conn.rodbc(),conn2 <- conn.rsqlserver(),
times=1)
tm
tm=expr
tm$expr
microbenchmark:::convert_to_unit(tm[grep(tm$expr,'rodbc'),]$time,'s')
grep(tm$expr,'rodbc')
tm$expr
microbenchmark:::convert_to_unit(tm[grep('rodbc',tm$expr),]$time,'s')
rdobc=microbenchmark:::convert_to_unit(tm[grep('rodbc',tm$expr),]$time,'s')
rodbc=microbenchmark:::convert_to_unit(tm[grep('rodbc',tm$expr),]$time,'s')
sapply(c('rodbc','sqlserver'),function(driver)
microbenchmark:::convert_to_unit(tm[grep(driver,tm$expr),]$time,'s')
)
sapply(c('rodbc','sqlserver'),function(driver)
microbenchmark:::convert_to_unit(tm[grep(driver,tm$expr),]$time,'s'))
dat <- sapply(c('rodbc','sqlserver'),function(driver)
microbenchmark:::convert_to_unit(tm[grep(driver,tm$expr),]$time,'s'))
scak(data)
t(dat)
stack(dat)
ggplot(stack(dat))+geom_bar(aes(x=ind)
ggplot(stack(dat))+geom_bar(aes(x=ind))
ggplot(stack(dat))+geom_bar(aes(x=ind,y=values))
ggplot(stack(dat))+geom_bar(aes(x=ind,y=values,fill=ind))
dat <- sapply(c('rodbc','sqlserver'),function(driver)
microbenchmark:::convert_to_unit(tm[grep(driver,tm$expr),]$time,'ms'))
ggplot(stack(dat))+
geom_bar(aes(x=ind,y=values,fill=ind)) +
xlab('driver') + ylab('time(ms)')
dat <- sapply(c('rodbc','sqlserver'),function(driver)
microbenchmark:::convert_to_unit(tm[grep(driver,tm$expr),]$time,'s'))
ggplot(stack(dat))+
geom_bar(aes(x=ind,y=values,fill=ind)) +
xlab('driver') + ylab('time(s)')
ggplot(stack(dat))+
geom_bar(aes(x=ind,y=values,fill=ind),stat='identity') +
xlab('driver') + ylab('time(s)')
107 dinars
107*10
300*107
dat
dat[,1]/dat[,2]
dat[1]/dat[2]
dat[1]
dat[2]
library(rsqlserver)
mapply(FUN(x,y) browser(),c('mean','sum','median'),c(3,2,1))
mapply(FUN=function(x,y) browser(),c('mean','sum','median'),c(3,2,1))
x
y
dat.xts <- read.zoo(text='time            price   volume  price_volume
14:56:42    31.15   173 540327
14:56:36    31.15   100 311500
14:56:27    31.16   4   12464
14:56:24    31.16   1   3116
14:56:21    31.16   46  143336
14:56:18    31.15   32  99680
14:56:15    31.16   6   18696
14:56:12    31.16   12  37392
14:56:06    31.16   15  46740
14:56:03    31.16   54  168264
14:55:57    31.19   1   3119
14:55:54    31.19   10  31190',tz="",index=1,format="%H:%M:%S",header=TRUE)
Q
dat.xts <- read.zoo(text='time            price   volume  price_volume
14:56:42    31.15   173 540327
14:56:36    31.15   100 311500
14:56:27    31.16   4   12464
14:56:24    31.16   1   3116
14:56:21    31.16   46  143336
14:56:18    31.15   32  99680
14:56:15    31.16   6   18696
14:56:12    31.16   12  37392
14:56:06    31.16   15  46740
14:56:03    31.16   54  168264
14:55:57    31.19   1   3119
14:55:54    31.19   10  31190',tz="",index=1,format="%H:%M:%S",header=TRUE)
library(zoo)
dat.xts <- read.zoo(text='time            price   volume  price_volume
14:56:42    31.15   173 540327
14:56:36    31.15   100 311500
14:56:27    31.16   4   12464
14:56:24    31.16   1   3116
14:56:21    31.16   46  143336
14:56:18    31.15   32  99680
14:56:15    31.16   6   18696
14:56:12    31.16   12  37392
14:56:06    31.16   15  46740
14:56:03    31.16   54  168264
14:55:57    31.19   1   3119
14:55:54    31.19   10  31190',tz="",index=1,format="%H:%M:%S",header=TRUE)
bars = period.apply(dat.xts,
endpoints(dat.xts,"secs",60),
function(xx){
ticks=coredata(xx$price)
c( first(ticks),max(ticks), min(ticks),
last(ticks), sum(xx$volume), sum(xx$price_volume) )
})
colnames(bars)=c("Open","High","Low","Close","Volume","Price*Volume")
align.time(bars,60)
library(zoo)
dat.xts <- read.zoo(text='time            price   volume  price_volume
14:56:42    31.15   173 540327
14:56:36    31.15   100 311500
14:56:27    31.16   4   12464
14:56:24    31.16   1   3116
14:56:21    31.16   46  143336
14:56:18    31.15   32  99680
14:56:15    31.16   6   18696
14:56:12    31.16   12  37392
14:56:06    31.16   15  46740
14:56:03    31.16   54  168264
14:55:57    31.19   1   3119
14:55:54    31.19   10  31190',tz="",index=1,format="%H:%M:%S",header=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
bars = period.apply(dat.xts,
endpoints(dat.xts,"secs",60),
function(xx){
ticks=coredata(xx$price)
c( first(ticks),max(ticks), min(ticks),
last(ticks), sum(xx$volume), sum(xx$price_volume) )
})
bars
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
library(knitr)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
getwd()
file.exists('Benchmarking.R')
file.path("a","b")
file.path("","b")
file.path(".","b")
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
tm <- microbenchmark(conn1<- conn.rodbc(),
conn2 <- conn.rsqlserver(),
conn3 <- conn.rjdbc(),
times=10)
tm
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
library(rsqlserver)
'a' + 'b'
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
engine( rsize==1000,bench.small)
source('~/.active-rstudio-document', echo=TRUE)
engine( rsize==1000,bench.small)
conn3
n
c
Q
source('~/.active-rstudio-document', echo=TRUE)
engine( rsize==1000,bench.small)
tables
name
get.rjdbc(crjdbc,n,name)
Q
source('~/.active-rstudio-document', echo=TRUE)
get.rjdbc(crjdbc,n,name)
engine( rsize==1000,bench.small)
n
n
n
engine( rsize==1000,bench.small)
n
n
rs
RJDBC::fetch(rs,n)
name
RJDBC::dbReadTable(conn,name)
rs
rs@jr
Q
source('~/.active-rstudio-document', echo=TRUE)
RJDBC::dbReadTable(conn,name)
engine( rsize==1000,bench.small)
c
c
Q
source('~/.active-rstudio-document', echo=TRUE)
engine( rsize==1000,bench.small)
engine( rsize==1000 & csize==10,bench.small)
res <- engine( rsize==1000 & csize==10,bench.small)
source('~/.active-rstudio-document', echo=TRUE)
engine( rsize==1000 & csize==10,bench.small)
source('~/.active-rstudio-document', echo=TRUE)
engine( rsize==1000 & csize==10,bench.small)
tables
source('~/.active-rstudio-document', echo=TRUE)
Q
source('~/.active-rstudio-document', echo=TRUE)
engine( rsize==1000 & csize==10,bench.small)
tm
n
n
tm.df
Q
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
engine( rsize==1000 & csize==10,bench.small)
c
c
c
source('~/.active-rstudio-document', echo=TRUE)
engine( rsize==1000 & csize==10,bench.small)
engine( rsize==1000 & csize==50,bench.small)
engine( rsize==1000 & csize==50,bench.big)
engine( rsize==1000 & csize==100,bench.small)
engine( rsize==1000 & csize==750,bench.small)
setTimeLimit(3)
engine( rsize==1000 & csize==750,bench.small)
setTimeLimit(30)
engine( rsize==1000 & csize==750,bench.small)
source('~/.active-rstudio-document', echo=TRUE)
engine( rsize==1000 & csize==750,bench.small)
e
Q
source('~/.active-rstudio-document', echo=TRUE)
engine( rsize==1000 & csize==750,bench.small)
setTimeLimit(3)
engine( rsize==1000 & csize==750,bench.small)
source('~/.active-rstudio-document', echo=TRUE)
engine( rsize==1000 & csize==750,bench.small)
setTimeLimit(3)
engine( rsize==1000 & csize==750,bench.small)
engine( rsize==1000 & csize==100,bench.small)
engine( rsize==10000 & csize==100,bench.small)
res <- engine( rsize==10000 & csize==100,bench.small)
engine( rsize==10000 & csize==10,bench.small)
engine( rsize==100000 & csize==10,bench.small)
engine( csize < 100,bench.small)
512/37
bench
bench.rows
res <- engine( rsize < 1e5 & csize < 100 ,bench.small)
res
ggplot(res) +
geom_point(aes(x=factor(rsize),y=time,color=method,shape=method),size=4) +
facet_grid(type~csize,scales = "free_y") +
scale_x_log10() +
ylab(label='time(s)') +
ggtitle("rsqlserver versus other drivers for \n small tables extraction")
ggplot(res) +
geom_point(aes(x=rsize,y=time,color=method,shape=method),size=4) +
facet_grid(type~csize,scales = "free_y") +
scale_x_log10() +
ylab(label='time(s)') +
ggtitle("rsqlserver versus other drivers for \n small tables extraction")
500/60
install.packages("R.utils")
library(R.utils)
library(rsqlserver)
